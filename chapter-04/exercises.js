////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
/**
 * As a bonus assignment, modify your range function 
 * to take an optional third argument that indicates the “step” 
 * value used when building the array. If no step is given, the elements
 *  go up by increments of one, corresponding to the old behavior. 
 * The function call range(1, 10, 2) should return [1, 3, 5, 7, 9].
 *  
 */
// 

function range(start, end, step){
  let array = []
  // if step is negative return an empty array
  if(step < 0){
    return []
  }
    else if (start === end){
      return []
    }
    // if there is no step value 
  else if(step === undefined){
    // loop through using 1 as the step value
  for(i = start; i <= end; i++){
    // push to the array
    array.push(i)
   }
  }
    else {
      // otherwise 
      // create a loop using start as the starting point, end
      // as the ending point and step as the amount to increment by 
    for( start; start <= end; start += step){
      // push the resulting values to the array
   array.push(start)
  }
       }
  // return the array
  return array
  }

////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// Next, write a sum function that takes an array 
//of numbers and returns the sum of these numbers.
//  Run the example program and see whether it does indeed return 55.
function sum(array) {
let sum = 0
for(let i = 0; i < array.length; i++){
  sum += array[i]
}
return sum
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(array) {
output = []
for(let i = 0; i < array.length; i++){
  output.unshift(array[i])
}
return output
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(array) {
return array.reverse()
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(array) {
let rest = null;
for(let i = array.length -1; i >=0; i--){

  // reassigiing rest to an object 
  // value set to array[i] and rest assigning the current rest
  rest = {value: array[i], rest: rest};
}
return rest
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list, array = []) {
// base
if(list.rest === null){
  array.push(list.value);
  return array
}
// recursion
array.push(list.value);
return listToArray(list.rest, array)
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend(value, list) {
 return {value, rest: list}
}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(list, n) {
 if (!list) return undefined;
  else if (n == 0) return list.value;
  else return nth(list.rest, n - 1);
}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(x, y) {
if (typeof x !== 'object' && typeof y !== 'object'){
return x ===y  
}
if (typeof x !== 'object' || typeof y !== 'object'){
  return false
}
let xKeys = Object.keys(x)
let yKeys = Object.keys(y)
if (xKeys.length !== yKeys.length){
  return false
}
for(let i = 0; i < xKeys.length; i++){
  if (!yKeys.includes(xKeys[i])|| !deepEqual(x[xKeys[i]], y[xKeys[i]])){
    return false
  }
}
return true
}


////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};